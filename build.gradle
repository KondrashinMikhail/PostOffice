plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'io.freefair.lombok' version '6.4.3.1'
	id 'java'
	id 'com.bmuschko.docker-spring-boot-application' version '9.3.7'
}

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
def ourContainerName = "containerPostOffice"

version = ''
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2:2.1.212'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
	implementation 'org.junit.platform:junit-platform-runner:1.10.0'

	testImplementation 'org.junit.platform:junit-platform-runner:1.10.1'
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	useJUnitPlatform()
}

task createDockerFile(type: Dockerfile) {
	from 'openjdk:17'
	copyFile './', '/app'
	copyFile 'PostOffice.jar', '/app/PostOffice.jar'
	copyFile 'PostOffice.test.jar', '/app/PostOffice-test1.jar'
	entryPoint 'java'
	defaultCommand '-jar', '/app/PostOffice.jar'
	exposePort 8080
}

task syncJar(type: Copy) {
	dependsOn assemble
	from jar.destinationDirectory
	into "$buildDir/docker"
}

compileJava {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

task buildImage(type: DockerBuildImage) {
	dependsOn createDockerFile, syncJar
	inputDir = createDockerFile.getDestDir()
	images = ["kondrashinm/tuneit-gradle-docker:1.0"]
	buildArgs = ['--platform': "linux/amd64"]
}

task stopContainer(type: DockerStopContainer) {
	targetContainerId("$ourContainerName")
	onError { exception -> handleError(exception) }
}

task removeContainer(type: DockerRemoveContainer) {
	dependsOn stopContainer
	targetContainerId("$ourContainerName")
	onError { exception -> handleError(exception) }
}

task createContainer(type: DockerCreateContainer) {
	dependsOn buildImage, removeContainer
	targetImageId buildImage.getImageId()
	containerName = "$ourContainerName"
	hostConfig.portBindings = ['8080:8080']
}

task startContainer(type: DockerStartContainer) {
	dependsOn createContainer
	targetContainerId("$ourContainerName")
}

configurations {
	testArtifacts
}

private void handleError(Throwable exc) {
	if (exc.message != null &&
			!exc.message.contains('NotModifiedException') &&
			!exc.message.contains('No such container')) {
		throw new RuntimeException(exc)
	}
}